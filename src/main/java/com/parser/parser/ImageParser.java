package com.parser.parser;

import com.parser.config.ParserConfig;
import com.parser.database.DatabaseManager;
import com.parser.generator.LinkGenerator;
import com.parser.model.LinkResult;
import com.parser.processor.ImageProcessor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
public class ImageParser implements AutoCloseable {
    private static final Logger logger = LoggerFactory.getLogger(ImageParser.class);
    
    private final DatabaseManager databaseManager;
    private final LinkGenerator linkGenerator;
    private final ExecutorService executorService;
    private final Semaphore semaphore;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    private final AtomicLong totalProcessed = new AtomicLong(0);
    private final AtomicLong emptyLinks = new AtomicLong(0);
    private final AtomicLong downloadedImages = new AtomicLong(0);
    private final AtomicLong skippedImages = new AtomicLong(0);
    private final AtomicLong errors = new AtomicLong(0);
    private final LocalDateTime startTime = LocalDateTime.now();
    
    public ImageParser() throws SQLException {
        this.databaseManager = new DatabaseManager();
        this.linkGenerator = new LinkGenerator();
        this.executorService = Executors.newFixedThreadPool(ParserConfig.MAX_CONCURRENT_REQUESTS);
        this.semaphore = new Semaphore(ParserConfig.MAX_CONCURRENT_REQUESTS);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏
     */
    public LinkResult processSingleUrl(String url, String hosting) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É —Å—Å—ã–ª–∫—É
            if (databaseManager.isUrlProcessed(url)) {
                logger.info("‚è≠Ô∏è URL —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {}", url);
                return LinkResult.builder()
                        .url(url)
                        .hosting(hosting)
                        .status("skipped")
                        .build();
            }
            
            logger.info("üéØ [{}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É #{}", hosting, totalProcessed.get() + 1);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            try (ImageProcessor processor = new ImageProcessor()) {
                LinkResult result = processor.processImageUrl(url, hosting);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                databaseManager.saveResult(result);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                updateStats(result.getStatus());
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 100 —Å—Å—ã–ª–æ–∫
                long total = totalProcessed.get();
                if (total % 100 == 0 && total > 0) {
                    logger.info("üìä –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {}, —Å–∫–∞—á–∞–Ω–æ {}, –ø—É—Å—Ç—ã—Ö {}, –æ—à–∏–±–æ–∫ {}", 
                        total, downloadedImages.get(), emptyLinks.get(), errors.get());
                }
                
                return result;
            }
            
        } catch (Exception e) {
            logger.error("üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {}: {}", url, e.getMessage());
            LinkResult result = LinkResult.builder()
                    .url(url)
                    .hosting(hosting)
                    .status("error")
                    .errorMessage(e.getMessage())
                    .build();
            
            databaseManager.saveResult(result);
            updateStats("error");
            return result;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ —Å—Å—ã–ª–æ–∫
     */
    public List<LinkResult> processUrlsBatch(List<String> urls, String hosting) {
        List<Future<LinkResult>> futures = urls.stream()
                .map(url -> executorService.submit(() -> processSingleUrl(url, hosting)))
                .toList();
        
        return futures.stream()
                .map(future -> {
                    try {
                        return future.get();
                    } catch (InterruptedException | ExecutionException e) {
                        logger.error("–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {}", e.getMessage());
                        return null;
                    }
                })
                .filter(result -> result != null)
                .toList();
    }
    
    /**
     * –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å—Å—ã–ª–æ–∫
     */
    public void runContinuousParsing(String hostingName, int batchSize) {
        if (!ParserConfig.HOSTINGS.containsKey(hostingName)) {
            throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ö–æ—Å—Ç–∏–Ω–≥: " + hostingName);
        }
        
        logger.info("–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è {}", hostingName);
        
        try {
            int batchNum = 0;
            while (!Thread.currentThread().isInterrupted()) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –±–∞—Ç—á —Å—Å—ã–ª–æ–∫
                List<String> urls = linkGenerator.generateHostingSpecificLinks(hostingName, batchSize);
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                List<LinkResult> results = processUrlsBatch(urls, hostingName);
                
                // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –±–∞—Ç—á–µ–π
                batchNum++;
                if (batchNum % 10 == 0) {
                    printStats();
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                Thread.sleep(100);
            }
        } catch (InterruptedException e) {
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏");
            Thread.currentThread().interrupt();
        }
    }
    
    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫
     */
    public void runFixedParsing(String hostingName, int totalUrls, int batchSize) {
        if (!ParserConfig.HOSTINGS.containsKey(hostingName)) {
            throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ö–æ—Å—Ç–∏–Ω–≥: " + hostingName);
        }
        
        logger.info("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ {} —Å—Å—ã–ª–æ–∫ –¥–ª—è {}", totalUrls, hostingName);
        
        try {
            int processed = 0;
            
            while (processed < totalUrls && !Thread.currentThread().isInterrupted()) {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞
                int currentBatchSize = Math.min(batchSize, totalUrls - processed);
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
                List<String> urls = linkGenerator.generateHostingSpecificLinks(hostingName, currentBatchSize);
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                List<LinkResult> results = processUrlsBatch(urls, hostingName);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                processed += results.size();
                
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                Thread.sleep(100);
            }
        } catch (InterruptedException e) {
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏");
            Thread.currentThread().interrupt();
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
     */
    public void processCustomUrls(List<String> urls, String hostingName) {
        if (!ParserConfig.HOSTINGS.containsKey(hostingName)) {
            throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ö–æ—Å—Ç–∏–Ω–≥: " + hostingName);
        }
        
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è {}", urls.size(), hostingName);
        
        try {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –±–∞—Ç—á–∞–º–∏
            int batchSize = ParserConfig.MAX_CONCURRENT_REQUESTS;
            for (int i = 0; i < urls.size(); i += batchSize) {
                int endIndex = Math.min(i + batchSize, urls.size());
                List<String> batchUrls = urls.subList(i, endIndex);
                
                List<LinkResult> results = processUrlsBatch(batchUrls, hostingName);
                
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                Thread.sleep(100);
            }
        } catch (InterruptedException e) {
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏");
            Thread.currentThread().interrupt();
        }
    }
    
    private void updateStats(String status) {
        totalProcessed.incrementAndGet();
        
        switch (status) {
            case "empty" -> emptyLinks.incrementAndGet();
            case "downloaded" -> downloadedImages.incrementAndGet();
            case "skipped" -> skippedImages.incrementAndGet();
            case "error" -> errors.incrementAndGet();
        }
    }
    
    public void printStats() {
        long total = totalProcessed.get();
        long downloaded = downloadedImages.get();
        long empty = emptyLinks.get();
        long error = errors.get();
        
        long elapsedSeconds = java.time.Duration.between(startTime, LocalDateTime.now()).getSeconds();
        double rate = elapsedSeconds > 0 ? (double) total / elapsedSeconds : 0;
        
        logger.info("=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===");
        logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {}", total);
        logger.info("–°–∫–∞—á–∞–Ω–æ: {}", downloaded);
        logger.info("–ü—É—Å—Ç—ã—Ö: {}", empty);
        logger.info("–û—à–∏–±–æ–∫: {}", error);
        logger.info("–°–∫–æ—Ä–æ—Å—Ç—å: {:.2f} —Å—Å—ã–ª–æ–∫/—Å–µ–∫", rate);
        logger.info("–í—Ä–µ–º—è: {} —Å–µ–∫", elapsedSeconds);
    }
    
    public void printFinalStats() {
        logger.info("=== –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===");
        printStats();
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        Map<String, Map<String, Integer>> dbStats = databaseManager.getStatistics();
        if (!dbStats.isEmpty()) {
            logger.info("=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ö–æ—Å—Ç–∞–º ===");
            dbStats.forEach((hosting, stats) -> {
                logger.info("{}: {} –≤—Å–µ–≥–æ, {} —Å–∫–∞—á–∞–Ω–æ", 
                    hosting, stats.get("total"), stats.get("downloaded"));
            });
        }
    }
    
    public List<LinkResult> getRecentResults(int limit) {
        return databaseManager.getRecentResults(limit);
    }
    
    public void cleanupOldRecords(int days) {
        databaseManager.cleanupOldRecords(days);
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –∫—Ä–∞—É–ª–µ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —Ç–æ–∫–µ–Ω–∞
     */
    public void runCrawler(String hostingName, int tokenLength) {
        if (!ParserConfig.HOSTINGS.containsKey(hostingName)) {
            throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ö–æ—Å—Ç–∏–Ω–≥: " + hostingName);
        }
        
        logger.info("üï∑Ô∏è –ó–∞–ø—É—Å–∫ –∫—Ä–∞—É–ª–µ—Ä–∞ –¥–ª—è {} —Å —Ä–∞–∑–º–µ—Ä–æ–º —Ç–æ–∫–µ–Ω–∞ {}", hostingName, 
                   tokenLength > 0 ? tokenLength : "–∞–≤—Ç–æ");
        
        try {
            // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ä–∞–∑–º–µ—Ä —Ç–æ–∫–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if (tokenLength > 0) {
                ParserConfig.HostingConfig config = ParserConfig.HOSTINGS.get(hostingName);
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —Ç–æ–∫–µ–Ω–∞
                ParserConfig.HOSTINGS.put(hostingName, new ParserConfig.HostingConfig(
                    config.getName(), config.getBaseUrl(), tokenLength, 
                    config.getTokenChars(), config.getCheckPath(), config.getDownloadPath()
                ));
                logger.info("üìù –û–±–Ω–æ–≤–ª–µ–Ω —Ä–∞–∑–º–µ—Ä —Ç–æ–∫–µ–Ω–∞ –¥–ª—è {}: {}", hostingName, tokenLength);
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            runContinuousParsing(hostingName, 100);
            
        } catch (Exception e) {
            logger.error("üí• –û—à–∏–±–∫–∞ –∫—Ä–∞—É–ª–µ—Ä–∞: {}", e.getMessage());
        }
    }
    
    /**
     * –£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π
     */
    public void runSmartParsing(String hostingName, int count) {
        if (!ParserConfig.HOSTINGS.containsKey(hostingName)) {
            throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ö–æ—Å—Ç–∏–Ω–≥: " + hostingName);
        }
        
        logger.info("üß† –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ {} —Å—Å—ã–ª–æ–∫ –¥–ª—è {}", count, hostingName);
        
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            List<String> urls = linkGenerator.generateHostingSpecificLinks(hostingName, count);
            logger.info("üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {} —É–º–Ω—ã—Ö —Å—Å—ã–ª–æ–∫", urls.size());
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –±–∞—Ç—á–∞–º–∏
            int batchSize = ParserConfig.MAX_CONCURRENT_REQUESTS;
            for (int i = 0; i < urls.size(); i += batchSize) {
                int endIndex = Math.min(i + batchSize, urls.size());
                List<String> batchUrls = urls.subList(i, endIndex);
                
                List<LinkResult> results = processUrlsBatch(batchUrls, hostingName);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if ((i + batchSize) % 100 == 0 || i + batchSize >= urls.size()) {
                    logger.info("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {}/{} ({}%)", 
                        Math.min(i + batchSize, urls.size()), urls.size(),
                        Math.round((double)(i + batchSize) / urls.size() * 100));
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                Thread.sleep(200);
            }
            
        } catch (Exception e) {
            logger.error("üí• –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {}", e.getMessage());
        }
    }
    
    @Override
    public void close() throws Exception {
        if (executorService != null) {
            executorService.shutdown();
            if (!executorService.awaitTermination(30, TimeUnit.SECONDS)) {
                executorService.shutdownNow();
            }
        }
        
        if (databaseManager != null) {
            databaseManager.close();
        }
    }
}
