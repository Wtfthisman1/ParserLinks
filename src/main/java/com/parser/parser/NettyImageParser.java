package com.parser.parser;

import com.parser.config.ParserConfig;
import com.parser.database.DatabaseManager;
import com.parser.generator.LinkGenerator;
import com.parser.model.LinkResult;
import com.parser.processor.NettyImageProcessor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ Netty
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
 */
public class NettyImageParser implements AutoCloseable {
    private static final Logger logger = LoggerFactory.getLogger(NettyImageParser.class);
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private static final int MAX_CONCURRENT_REQUESTS = 1000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤ 10 —Ä–∞–∑
    private static final int BATCH_SIZE = 100;
    private static final int RATE_LIMIT_PER_SECOND = 500; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º RPS
    
    private final DatabaseManager databaseManager;
    private final LinkGenerator linkGenerator;
    private final NettyImageProcessor nettyProcessor;
    
    // –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    private final ExecutorService resultProcessor;
    
    // Rate limiter –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
    private final Semaphore rateLimiter;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    private final AtomicLong totalProcessed = new AtomicLong(0);
    private final AtomicLong emptyLinks = new AtomicLong(0);
    private final AtomicLong downloadedImages = new AtomicLong(0);
    private final AtomicLong skippedImages = new AtomicLong(0);
    private final AtomicLong errors = new AtomicLong(0);
    private final LocalDateTime startTime = LocalDateTime.now();
    
    public NettyImageParser() throws SQLException {
        this.databaseManager = new DatabaseManager();
        this.linkGenerator = new LinkGenerator();
        this.nettyProcessor = new NettyImageProcessor();
        this.resultProcessor = Executors.newFixedThreadPool(16); // 16 –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        this.rateLimiter = new Semaphore(RATE_LIMIT_PER_SECOND);
        
        logger.info("üöÄ NettyImageParser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–æ–º");
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    public CompletableFuture<LinkResult> processSingleUrlAsync(String url, String hosting) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É —Å—Å—ã–ª–∫—É
                if (databaseManager.isUrlProcessed(url)) {
                    logger.debug("‚è≠Ô∏è URL —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {}", url);
                    return LinkResult.builder()
                            .url(url)
                            .hosting(hosting)
                            .status("skipped")
                            .build();
                }
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting
                rateLimiter.acquire();
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Netty
                return nettyProcessor.processImageUrlAsync(url, hosting).get();
                
            } catch (Exception e) {
                logger.error("üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {}: {}", url, e.getMessage());
                return LinkResult.builder()
                        .url(url)
                        .hosting(hosting)
                        .status("error")
                        .errorMessage(e.getMessage())
                        .build();
            }
        }, resultProcessor).thenApply(result -> {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try {
                databaseManager.saveResult(result);
                updateStats(result.getStatus());
            } catch (Exception e) {
                logger.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {}", e.getMessage());
            }
            return result;
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ —Å—Å—ã–ª–æ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–æ–º
     */
    public List<LinkResult> processUrlsBatch(List<String> urls, String hosting) {
        logger.info("üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –±–∞—Ç—á –∏–∑ {} —Å—Å—ã–ª–æ–∫ –¥–ª—è {}", urls.size(), hosting);
        
        // –°–æ–∑–¥–∞–µ–º CompletableFuture –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏
        List<CompletableFuture<LinkResult>> futures = urls.stream()
                .map(url -> processSingleUrlAsync(url, hosting))
                .toList();
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        CompletableFuture<Void> allFutures = CompletableFuture.allOf(
                futures.toArray(new CompletableFuture[0])
        );
        
        try {
            allFutures.get(10, TimeUnit.SECONDS); // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 30 –¥–æ 10 —Å–µ–∫—É–Ω–¥
            
            // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            return futures.stream()
                    .map(future -> {
                        try {
                            return future.get(2, TimeUnit.SECONDS); // –¢–∞–π–º–∞—É—Ç 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É
                        } catch (Exception e) {
                            logger.error("–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {}", e.getMessage());
                            return null;
                        }
                    })
                    .filter(result -> result != null)
                    .toList();
                    
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞: {}", e.getMessage());
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
            return futures.stream()
                    .map(future -> {
                        try {
                            return future.getNow(null);
                        } catch (Exception ex) {
                            return null;
                        }
                    })
                    .filter(result -> result != null)
                    .toList();
        }
    }
    
    /**
     * –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
     */
    public void runContinuousParsing(String hostingName, int batchSize) {
        if (!ParserConfig.HOSTINGS.containsKey(hostingName)) {
            throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ö–æ—Å—Ç–∏–Ω–≥: " + hostingName);
        }
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è {} —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é", hostingName);
        
        try {
            int batchNum = 0;
            while (!Thread.currentThread().isInterrupted()) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –±–∞—Ç—á —Å—Å—ã–ª–æ–∫
                List<String> urls = linkGenerator.generateHostingSpecificLinks(hostingName, batchSize);
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                List<LinkResult> results = processUrlsBatch(urls, hostingName);
                
                // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –±–∞—Ç—á–µ–π
                batchNum++;
                if (batchNum % 10 == 0) {
                    printStats();
                    printNettyStats();
                }
                
                // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                Thread.sleep(50);
            }
        } catch (InterruptedException e) {
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏");
            Thread.currentThread().interrupt();
        }
    }
    
    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫
     */
    public void runFixedParsing(String hostingName, int totalUrls, int batchSize) {
        if (!ParserConfig.HOSTINGS.containsKey(hostingName)) {
            throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ö–æ—Å—Ç–∏–Ω–≥: " + hostingName);
        }
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ {} —Å—Å—ã–ª–æ–∫ –¥–ª—è {} —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é", totalUrls, hostingName);
        
        try {
            int processed = 0;
            
            while (processed < totalUrls && !Thread.currentThread().isInterrupted()) {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞
                int currentBatchSize = Math.min(batchSize, totalUrls - processed);
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
                List<String> urls = linkGenerator.generateHostingSpecificLinks(hostingName, currentBatchSize);
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                List<LinkResult> results = processUrlsBatch(urls, hostingName);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                processed += results.size();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if (processed % 1000 == 0 || processed >= totalUrls) {
                    logger.info("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {}/{} ({}%)", 
                        processed, totalUrls, Math.round((double) processed / totalUrls * 100));
                }
                
                // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                Thread.sleep(50);
            }
        } catch (InterruptedException e) {
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏");
            Thread.currentThread().interrupt();
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
     */
    public void processCustomUrls(List<String> urls, String hostingName) {
        if (!ParserConfig.HOSTINGS.containsKey(hostingName)) {
            throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ö–æ—Å—Ç–∏–Ω–≥: " + hostingName);
        }
        
        logger.info("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è {} —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é", 
                   urls.size(), hostingName);
        
        try {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –±–∞—Ç—á–∞–º–∏
            for (int i = 0; i < urls.size(); i += BATCH_SIZE) {
                int endIndex = Math.min(i + BATCH_SIZE, urls.size());
                List<String> batchUrls = urls.subList(i, endIndex);
                
                List<LinkResult> results = processUrlsBatch(batchUrls, hostingName);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if ((i + BATCH_SIZE) % 1000 == 0 || i + BATCH_SIZE >= urls.size()) {
                    logger.info("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {}/{} ({}%)", 
                        Math.min(i + BATCH_SIZE, urls.size()), urls.size(),
                        Math.round((double)(i + BATCH_SIZE) / urls.size() * 100));
                }
                
                // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                Thread.sleep(50);
            }
        } catch (InterruptedException e) {
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏");
            Thread.currentThread().interrupt();
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –∫—Ä–∞—É–ª–µ—Ä–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
     */
    public void runCrawler(String hostingName, int tokenLength) {
        if (!ParserConfig.HOSTINGS.containsKey(hostingName)) {
            throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ö–æ—Å—Ç–∏–Ω–≥: " + hostingName);
        }
        
        logger.info("üï∑Ô∏è –ó–∞–ø—É—Å–∫ –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—Ä–∞—É–ª–µ—Ä–∞ –¥–ª—è {} —Å —Ä–∞–∑–º–µ—Ä–æ–º —Ç–æ–∫–µ–Ω–∞ {}", hostingName, 
                   tokenLength > 0 ? tokenLength : "–∞–≤—Ç–æ");
        
        try {
            // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ä–∞–∑–º–µ—Ä —Ç–æ–∫–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if (tokenLength > 0) {
                ParserConfig.HostingConfig config = ParserConfig.HOSTINGS.get(hostingName);
                ParserConfig.HOSTINGS.put(hostingName, new ParserConfig.HostingConfig(
                    config.getName(), config.getBaseUrl(), tokenLength, 
                    config.getTokenChars(), config.getCheckPath(), config.getDownloadPath()
                ));
                logger.info("üìù –û–±–Ω–æ–≤–ª–µ–Ω —Ä–∞–∑–º–µ—Ä —Ç–æ–∫–µ–Ω–∞ –¥–ª—è {}: {}", hostingName, tokenLength);
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            runContinuousParsing(hostingName, BATCH_SIZE);
            
        } catch (Exception e) {
            logger.error("üí• –û—à–∏–±–∫–∞ –∫—Ä–∞—É–ª–µ—Ä–∞: {}", e.getMessage());
        }
    }
    
    /**
     * –£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
     */
    public void runSmartParsing(String hostingName, int count) {
        if (!ParserConfig.HOSTINGS.containsKey(hostingName)) {
            throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ö–æ—Å—Ç–∏–Ω–≥: " + hostingName);
        }
        
        logger.info("üß† –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ {} —Å—Å—ã–ª–æ–∫ –¥–ª—è {} —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é", 
                   count, hostingName);
        
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            List<String> urls = linkGenerator.generateHostingSpecificLinks(hostingName, count);
            logger.info("üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {} —É–º–Ω—ã—Ö —Å—Å—ã–ª–æ–∫", urls.size());
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –±–∞—Ç—á–∞–º–∏
            for (int i = 0; i < urls.size(); i += BATCH_SIZE) {
                int endIndex = Math.min(i + BATCH_SIZE, urls.size());
                List<String> batchUrls = urls.subList(i, endIndex);
                
                List<LinkResult> results = processUrlsBatch(batchUrls, hostingName);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if ((i + BATCH_SIZE) % 1000 == 0 || i + BATCH_SIZE >= urls.size()) {
                    logger.info("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {}/{} ({}%)", 
                        Math.min(i + BATCH_SIZE, urls.size()), urls.size(),
                        Math.round((double)(i + BATCH_SIZE) / urls.size() * 100));
                }
                
                // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                Thread.sleep(50);
            }
            
        } catch (Exception e) {
            logger.error("üí• –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {}", e.getMessage());
        }
    }
    
    private void updateStats(String status) {
        totalProcessed.incrementAndGet();
        
        switch (status) {
            case "empty" -> emptyLinks.incrementAndGet();
            case "downloaded" -> downloadedImages.incrementAndGet();
            case "skipped" -> skippedImages.incrementAndGet();
            case "error" -> errors.incrementAndGet();
        }
    }
    
    public void printStats() {
        long total = totalProcessed.get();
        long downloaded = downloadedImages.get();
        long empty = emptyLinks.get();
        long error = errors.get();
        
        long elapsedSeconds = java.time.Duration.between(startTime, LocalDateTime.now()).getSeconds();
        double rate = elapsedSeconds > 0 ? (double) total / elapsedSeconds : 0;
        
        logger.info("=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Netty –ø–∞—Ä—Å–µ—Ä–∞ ===");
        logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {}", total);
        logger.info("–°–∫–∞—á–∞–Ω–æ: {}", downloaded);
        logger.info("–ü—É—Å—Ç—ã—Ö: {}", empty);
        logger.info("–û—à–∏–±–æ–∫: {}", error);
        logger.info("–°–∫–æ—Ä–æ—Å—Ç—å: {:.2f} —Å—Å—ã–ª–æ–∫/—Å–µ–∫", rate);
        logger.info("–í—Ä–µ–º—è: {} —Å–µ–∫", elapsedSeconds);
    }
    
    public void printNettyStats() {
        Map<String, Object> nettyStats = nettyProcessor.getPerformanceStats();
        logger.info("=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Netty ===");
        logger.info("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {}", nettyStats.get("totalRequests"));
        logger.info("–£—Å–ø–µ—à–Ω—ã—Ö: {}", nettyStats.get("successfulRequests"));
        logger.info("–û—à–∏–±–æ–∫: {}", nettyStats.get("failedRequests"));
        logger.info("–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {}", nettyStats.get("successRate"));
        logger.info("–ü—Ä–æ—á–∏—Ç–∞–Ω–æ –±–∞–π—Ç: {}", nettyStats.get("bytesRead"));
        logger.info("–†–∞–Ω–Ω–∏—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π: {}", nettyStats.get("earlyTerminations"));
        logger.info("–ü—É–ª–ª–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {}", nettyStats.get("connectionPools"));
    }
    
    public void printFinalStats() {
        logger.info("=== –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Netty –ø–∞—Ä—Å–µ—Ä–∞ ===");
        printStats();
        printNettyStats();
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        Map<String, Map<String, Integer>> dbStats = databaseManager.getStatistics();
        if (!dbStats.isEmpty()) {
            logger.info("=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ö–æ—Å—Ç–∞–º ===");
            dbStats.forEach((hosting, stats) -> {
                logger.info("{}: {} –≤—Å–µ–≥–æ, {} —Å–∫–∞—á–∞–Ω–æ", 
                    hosting, stats.get("total"), stats.get("downloaded"));
            });
        }
    }
    
    public List<LinkResult> getRecentResults(int limit) {
        return databaseManager.getRecentResults(limit);
    }
    
    public void cleanupOldRecords(int days) {
        databaseManager.cleanupOldRecords(days);
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –∏–∑ —Ñ–∞–π–ª–∞
     */
    public void testWithRealLinks(String filePath) {
        try {
            List<String> urls = java.nio.file.Files.readAllLines(java.nio.file.Path.of(filePath));
            logger.info("üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —Å—Å—ã–ª–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞: {}", urls.size(), filePath);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            List<CompletableFuture<LinkResult>> futures = urls.stream()
                .map(url -> processSingleUrlAsync(url.trim(), extractHosting(url)))
                .collect(java.util.stream.Collectors.toList());
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();
            
            logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
            printFinalStats();
            
        } catch (Exception e) {
            logger.error("üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏: {}", e.getMessage());
        }
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ö–æ—Å—Ç–∏–Ω–≥ –∏–∑ URL
     */
    private String extractHosting(String url) {
        if (url.contains("ibb.co")) {
            return "imgbb";
        } else if (url.contains("postimg.cc")) {
            return "postimages";
        } else {
            return "unknown";
        }
    }
    
    @Override
    public void close() throws Exception {
        logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ NettyImageParser...");
        
        if (resultProcessor != null) {
            resultProcessor.shutdown();
            if (!resultProcessor.awaitTermination(30, TimeUnit.SECONDS)) {
                resultProcessor.shutdownNow();
            }
        }
        
        if (nettyProcessor != null) {
            nettyProcessor.close();
        }
        
        if (databaseManager != null) {
            databaseManager.close();
        }
        
        logger.info("‚úÖ NettyImageParser –∑–∞–∫—Ä—ã—Ç");
    }
}
