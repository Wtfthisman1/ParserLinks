package com.parser.processor;

import com.parser.config.ParserConfig;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.Random;

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü
 */
public class HtmlImageExtractor implements AutoCloseable {
    private static final Logger logger = LoggerFactory.getLogger(HtmlImageExtractor.class);
    
    private final OkHttpClient httpClient;
    private final Random random;
    
    public HtmlImageExtractor() {
        this.httpClient = new OkHttpClient.Builder()
                .connectTimeout(30, TimeUnit.SECONDS)
                .readTimeout(30, TimeUnit.SECONDS)
                .writeTimeout(30, TimeUnit.SECONDS)
                .build();
        this.random = new Random();
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    public List<String> extractImageUrls(String pageUrl) {
        List<String> imageUrls = new ArrayList<>();
        
        try {
            logger.info("üåê –ü–∞—Ä—Å–∏–Ω–≥ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {}", pageUrl);
            
            // –°–∫–∞—á–∏–≤–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (–±–µ–∑ —Å–∂–∞—Ç–∏—è)
            Request request = new Request.Builder()
                    .url(pageUrl)
                    .header("User-Agent", ParserConfig.USER_AGENTS[random.nextInt(ParserConfig.USER_AGENTS.length)])
                    .header("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8")
                    .header("Accept-Language", "en-US,en;q=0.9,ru;q=0.8")
                    .header("DNT", "1")
                    .header("Connection", "keep-alive")
                    .header("Upgrade-Insecure-Requests", "1")
                    .build();
            
            try (Response response = httpClient.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    logger.info("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: {} {}", response.code(), response.message());
                    return imageUrls;
                }
                
                ResponseBody body = response.body();
                if (body == null) {
                    logger.info("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã");
                    return imageUrls;
                }
                
                String html = body.string();
                logger.info("üìÑ HTML —Ä–∞–∑–º–µ—Ä: {} —Å–∏–º–≤–æ–ª–æ–≤", html.length());
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info("üìÑ HTML –Ω–∞—á–∞–ª–æ: {}", html.substring(0, Math.min(500, html.length())));
                
                // –ü–∞—Ä—Å–∏–º HTML
                Document doc = Jsoup.parse(html, pageUrl);
                
                // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ò—â–µ–º –≤ –º–µ—Ç–∞-—Ç–µ–≥–∞—Ö (–æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
                Elements metaElements = doc.select("meta[property='og:image'], meta[name='twitter:image']");
                logger.info("üîç –ù–∞–π–¥–µ–Ω–æ {} –º–µ—Ç–∞-—Ç–µ–≥–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏", metaElements.size());
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º –≤—Å–µ –º–µ—Ç–∞-—Ç–µ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                Elements allMetaElements = doc.select("meta");
                logger.info("üîç –í—Å–µ–≥–æ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤: {}", allMetaElements.size());
                for (Element meta : allMetaElements) {
                    String property = meta.attr("property");
                    String name = meta.attr("name");
                    String content = meta.attr("content");
                    if ((property != null && (property.contains("image") || property.contains("og"))) ||
                        (name != null && name.contains("image"))) {
                        logger.info("üîç –ù–∞–π–¥–µ–Ω –º–µ—Ç–∞-—Ç–µ–≥: property='{}', name='{}', content='{}'", property, name, content);
                    }
                }
                
                for (Element meta : metaElements) {
                    String content = meta.attr("content");
                    if (content != null && !content.trim().isEmpty()) {
                        String absoluteUrl = resolveUrl(pageUrl, content);
                        if (isImageUrl(absoluteUrl)) {
                            imageUrls.add(absoluteUrl);
                            logger.info("üèÜ –ü–†–ò–û–†–ò–¢–ï–¢–ù–û–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –º–µ—Ç–∞-—Ç–µ–≥–∞: {}", absoluteUrl);
                        }
                    }
                }
                
                // –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ò—â–µ–º –±–æ–ª—å—à–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ img —Ç–µ–≥–∞—Ö (–∏—Å–∫–ª—é—á–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø—ã)
                Elements imgElements = doc.select("img[src]");
                logger.info("üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ {} img —Ç–µ–≥–æ–≤", imgElements.size());
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ img —Ç–µ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                for (Element img : imgElements) {
                    String src = img.attr("src");
                    String id = img.attr("id");
                    String alt = img.attr("alt");
                    logger.info("üñºÔ∏è –ù–∞–π–¥–µ–Ω img: src='{}', id='{}', alt='{}'", src, id, alt);
                }
                
                for (Element img : imgElements) {
                    String src = img.attr("src");
                    if (src != null && !src.trim().isEmpty()) {
                        String absoluteUrl = resolveUrl(pageUrl, src);
                        if (isImageUrl(absoluteUrl) && !isLogo(absoluteUrl)) {
                            imageUrls.add(absoluteUrl);
                            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {}", absoluteUrl);
                        }
                    }
                }
                
                // –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ç–µ–≥–∞—Ö
                Elements linkElements = doc.select("a[href]");
                logger.info("üîó –ù–∞–π–¥–µ–Ω–æ {} —Å—Å—ã–ª–æ–∫", linkElements.size());
                
                for (Element link : linkElements) {
                    String href = link.attr("href");
                    if (href != null && !href.trim().isEmpty()) {
                        String absoluteUrl = resolveUrl(pageUrl, href);
                        if (isImageUrl(absoluteUrl) && !isLogo(absoluteUrl)) {
                            imageUrls.add(absoluteUrl);
                            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {}", absoluteUrl);
                        }
                    }
                }
                
                logger.info("üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", imageUrls.size());
                
            }
        } catch (Exception e) {
            logger.error("üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML {}: {}", pageUrl, e.getMessage());
        }
        
        return imageUrls;
    }
    
    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
     */
    private String resolveUrl(String baseUrl, String relativeUrl) {
        try {
            URL base = new URL(baseUrl);
            URL resolved = new URL(base, relativeUrl);
            return resolved.toString();
        } catch (Exception e) {
            logger.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å URL: {} + {}", baseUrl, relativeUrl);
            return relativeUrl;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
     */
    private boolean isImageUrl(String url) {
        if (url == null || url.trim().isEmpty()) {
            return false;
        }
        
        String lowerUrl = url.toLowerCase();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        String[] imageExtensions = {".jpg", ".jpeg", ".png", ".gif", ".webp", ".bmp", ".svg", ".ico"};
        for (String ext : imageExtensions) {
            if (lowerUrl.contains(ext)) {
                return true;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω—ã –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–æ—Ç–æ—Ö–æ—Å—Ç–∏–Ω–≥–æ–≤
        String[] imageDomains = {
            "imgbb.com", "postimages.org", "postimg.cc", "gekkk.co",
            "imgur.com", "flickr.com", "500px.com", "unsplash.com"
        };
        
        for (String domain : imageDomains) {
            if (lowerUrl.contains(domain)) {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –ª–æ–≥–æ—Ç–∏–ø–æ–º —Å–∞–π—Ç–∞
     */
    private boolean isLogo(String url) {
        if (url == null || url.trim().isEmpty()) {
            return false;
        }
        
        String lowerUrl = url.toLowerCase();
        
        // –ò—Å–∫–ª—é—á–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø—ã –∏ –∏–∫–æ–Ω–∫–∏
        String[] logoPatterns = {
            "logo", "favicon", "icon", "brand", "header", "nav"
        };
        
        for (String pattern : logoPatterns) {
            if (lowerUrl.contains(pattern)) {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
     */
    public void close() {
        if (httpClient != null) {
            httpClient.dispatcher().executorService().shutdown();
            httpClient.connectionPool().evictAll();
        }
    }
}
