package com.parser.processor;

import com.parser.config.ParserConfig;
import com.parser.model.LinkResult;
import io.netty.bootstrap.Bootstrap;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.channel.*;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.codec.http.*;
import io.netty.handler.codec.http2.Http2FrameCodecBuilder;
import io.netty.handler.codec.http2.Http2MultiplexHandler;
import io.netty.handler.codec.http2.Http2Settings;
import io.netty.handler.ssl.SslContext;
import io.netty.handler.ssl.SslContextBuilder;
import io.netty.handler.ssl.util.InsecureTrustManagerFactory;
import io.netty.handler.timeout.ReadTimeoutHandler;
import io.netty.handler.timeout.WriteTimeoutHandler;
import io.netty.util.concurrent.DefaultThreadFactory;
import io.netty.util.concurrent.Future;
import io.netty.util.concurrent.Promise;
import io.netty.channel.ChannelFuture;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ Netty
 * –†–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º
 */
public class NettyImageProcessor implements AutoCloseable {
    private static final Logger logger = LoggerFactory.getLogger(NettyImageProcessor.class);
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private static final int MAX_CONCURRENT_STREAMS = 100;  // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    private static final int CONNECTION_POOL_SIZE = 10;     // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    private static final int READ_TIMEOUT_SECONDS = 15;     // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    private static final int WRITE_TIMEOUT_SECONDS = 10;    // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    private static final int CONNECT_TIMEOUT_MS = 10000;    // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    private static final int MAX_CHUNK_SIZE = 8192; // 8KB —á–∞–Ω–∫–∏ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
    
    // EventLoop –≥—Ä—É–ø–ø—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private final NioEventLoopGroup bossGroup;
    private final NioEventLoopGroup workerGroup;
    
    // –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ —Ö–æ—Å—Ç–∞–º
    private final Map<String, ConnectionPool> connectionPools;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private final AtomicLong totalRequests = new AtomicLong(0);
    private final AtomicLong successfulRequests = new AtomicLong(0);
    private final AtomicLong failedRequests = new AtomicLong(0);
    private final AtomicLong bytesRead = new AtomicLong(0);
    private final AtomicLong earlyTerminations = new AtomicLong(0);
    
    // –ü—É–ª User-Agent'–æ–≤ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
    private final String[] userAgents = {
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
    };
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ HTML
    private static final Pattern IMG_PATTERN = Pattern.compile(
        "<img[^>]+src=[\"']([^\"']+)[\"'][^>]*>", 
        Pattern.CASE_INSENSITIVE | Pattern.MULTILINE
    );
    
    private static final Pattern IMAGE_URL_PATTERN = Pattern.compile(
        "(?:https?:)?//[^\\s\"'<>]+?\\.(?:jpg|jpeg|png|gif|webp|bmp|svg)(?:\\?[^\\s\"'<>]*)?",
        Pattern.CASE_INSENSITIVE
    );
    
    public NettyImageProcessor() {
        // –°–æ–∑–¥–∞–µ–º EventLoop –≥—Ä—É–ø–ø—ã —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        int cpuCores = Runtime.getRuntime().availableProcessors();
        this.bossGroup = new NioEventLoopGroup(1, new DefaultThreadFactory("netty-boss", true));
        this.workerGroup = new NioEventLoopGroup(cpuCores * 2, new DefaultThreadFactory("netty-worker", true));
        
        this.connectionPools = new ConcurrentHashMap<>();
        
        logger.info("üöÄ NettyImageProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {} —è–¥–µ—Ä CPU", cpuCores);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
     */
    public CompletableFuture<LinkResult> processImageUrlAsync(String url, String hosting) {
        totalRequests.incrementAndGet();
        
        return CompletableFuture.supplyAsync(() -> {
            try {
                logger.debug("üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {}", url);
                
                // –ü–∞—Ä—Å–∏–º URL
                URI uri = URI.create(url);
                String host = uri.getHost();
                int port = uri.getPort() != -1 ? uri.getPort() : (uri.getScheme().equals("https") ? 443 : 80);
                boolean ssl = uri.getScheme().equals("https");
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —Ö–æ—Å—Ç–∞
                ConnectionPool pool = connectionPools.computeIfAbsent(host, 
                    h -> new ConnectionPool(host, port, ssl, CONNECTION_POOL_SIZE));
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π GET –∑–∞–ø—Ä–æ—Å
                ImageMetadata metadata = performStreamingGet(pool, uri, hosting);
                
                if (metadata == null) {
                    failedRequests.incrementAndGet();
                    return LinkResult.builder()
                            .url(url)
                            .hosting(hosting)
                            .status("empty")
                            .build();
                }
                
                successfulRequests.incrementAndGet();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                Integer ageDays = checkImageAge(metadata);
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–∫–∞—á–∏–≤–∞—Ç—å
                if (!shouldDownloadImage(ageDays)) {
                    return LinkResult.builder()
                            .url(url)
                            .hosting(hosting)
                            .status("skipped")
                            .imageAgeDays(ageDays)
                            .build();
                }
                
                // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                Path filePath = downloadImage(url, hosting, metadata);
                
                if (filePath != null) {
                    return LinkResult.builder()
                            .url(url)
                            .hosting(hosting)
                            .status("downloaded")
                            .filePath(filePath)
                            .fileSize(metadata.getFileSize())
                            .imageAgeDays(ageDays)
                            .build();
                } else {
                    return LinkResult.builder()
                            .url(url)
                            .hosting(hosting)
                            .status("error")
                            .imageAgeDays(ageDays)
                            .errorMessage("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                            .build();
                }
                
            } catch (Exception e) {
                failedRequests.incrementAndGet();
                logger.error("üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {}: {}", url, e.getMessage());
                return LinkResult.builder()
                        .url(url)
                        .hosting(hosting)
                        .status("error")
                        .errorMessage(e.getMessage())
                        .build();
            }
        });
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π GET –∑–∞–ø—Ä–æ—Å —Å —Ä–∞–Ω–Ω–∏–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ–º
     */
    private ImageMetadata performStreamingGet(ConnectionPool pool, URI uri, String hosting) {
        try {
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            Promise<ImageMetadata> promise = pool.getEventLoop().newPromise();
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
            Channel channel = pool.acquireConnection();
            
            if (channel == null) {
                logger.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è {}", uri);
                return null;
            }
            
            try {
                // –°–æ–∑–¥–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å
                HttpRequest request = createOptimizedRequest(uri);
                
                // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                StreamingImageHandler handler = new StreamingImageHandler(promise, hosting);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ pipeline
                channel.pipeline().addLast(handler);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                channel.writeAndFlush(request).addListener(future -> {
                    if (!future.isSuccess()) {
                        promise.setFailure(future.cause());
                    }
                });
                
                // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                if (!promise.await(READ_TIMEOUT_SECONDS, TimeUnit.SECONDS)) {
                    promise.setFailure(new TimeoutException("Timeout waiting for response"));
                }
                
                return promise.get();
                
            } finally {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
                pool.releaseConnection(channel);
            }
            
        } catch (Exception e) {
            logger.error("üí• –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ GET: {}", e.getMessage());
            return null;
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å
     */
    private HttpRequest createOptimizedRequest(URI uri) {
        String userAgent = userAgents[Thread.currentThread().hashCode() % userAgents.length];
        
        DefaultFullHttpRequest request = new DefaultFullHttpRequest(
            HttpVersion.HTTP_1_1,
            HttpMethod.GET,
            uri.getPath() + (uri.getQuery() != null ? "?" + uri.getQuery() : ""),
            PooledByteBufAllocator.DEFAULT.buffer(0)
        );
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        request.headers().set(HttpHeaderNames.HOST, uri.getHost() + (uri.getPort() != -1 ? ":" + uri.getPort() : ""));
        request.headers().set(HttpHeaderNames.USER_AGENT, userAgent);
        request.headers().set(HttpHeaderNames.ACCEPT, "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8");
        request.headers().set(HttpHeaderNames.ACCEPT_LANGUAGE, "en-US,en;q=0.9,ru;q=0.8");
        request.headers().set(HttpHeaderNames.ACCEPT_ENCODING, "gzip, deflate, br");
        request.headers().set(HttpHeaderNames.CONNECTION, "keep-alive");
        request.headers().set(HttpHeaderNames.UPGRADE_INSECURE_REQUESTS, "1");
        
        return request;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private Integer checkImageAge(ImageMetadata metadata) {
        try {
            String lastModified = metadata.getLastModified();
            if (lastModified != null) {
                try {
                    DateTimeFormatter formatter = DateTimeFormatter.RFC_1123_DATE_TIME;
                    LocalDateTime dt = LocalDateTime.parse(lastModified, formatter);
                    return (int) java.time.Duration.between(dt, LocalDateTime.now()).toDays();
                } catch (Exception e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                }
            }
            
            String dateHeader = metadata.getDate();
            if (dateHeader != null) {
                try {
                    DateTimeFormatter formatter = DateTimeFormatter.RFC_1123_DATE_TIME;
                    LocalDateTime dt = LocalDateTime.parse(dateHeader, formatter);
                    return (int) java.time.Duration.between(dt, LocalDateTime.now()).toDays();
                } catch (Exception e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                }
            }
            
            return 0;
            
        } catch (Exception e) {
            logger.debug("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞: {}", e.getMessage());
            return null;
        }
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–∫–∞—á–∏–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
     */
    private boolean shouldDownloadImage(Integer ageDays) {
        if (ageDays == null) {
            return true;
        }
        return ageDays >= ParserConfig.MIN_IMAGE_AGE_DAYS;
    }
    
    /**
     * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private Path downloadImage(String url, String hosting, ImageMetadata metadata) {
        try {
            String downloadUrl = metadata.getImageUrl() != null ? metadata.getImageUrl() : url;
            logger.debug("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é: {}", downloadUrl);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            String extension = getExtensionFromContentType(metadata.getContentType());
            if (extension == null) {
                extension = getExtensionFromUrl(downloadUrl);
                if (extension == null) {
                    extension = ".jpg";
                }
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            String filename = generateFilename(url, hosting, extension);
            Path filepath = ParserConfig.DOWNLOAD_DIR.resolve(filename);
            
            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            Files.createDirectories(ParserConfig.DOWNLOAD_DIR);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º curl –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)
            String curlCommand = String.format(
                "curl -s -L \"%s\" -H \"User-Agent: %s\" " +
                "-H \"Accept: */*\" -H \"Referer: %s\" -o \"%s\"",
                downloadUrl, 
                userAgents[0],
                getReferer(hosting),
                filepath.toString()
            );
            
            Process process = Runtime.getRuntime().exec(new String[]{"bash", "-c", curlCommand});
            int exitCode = process.waitFor();
            
            if (exitCode == 0) {
                logger.debug("‚úÖ –°–∫–∞—á–∞–Ω: {}", filepath);
                return filepath;
            } else {
                logger.error("‚ùå –û—à–∏–±–∫–∞ curl (–∫–æ–¥ {}): {}", exitCode, curlCommand);
                return null;
            }
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {}: {}", url, e.getMessage());
            return null;
        }
    }
    
    private String getReferer(String hosting) {
        return switch (hosting) {
            case "postimages" -> "https://postimg.cc/";
            case "imgbb" -> "https://ru.imgbb.com/";
            default -> "https://example.com/";
        };
    }
    
    private String getExtensionFromContentType(String contentType) {
        if (contentType == null) return null;
        
        return switch (contentType.toLowerCase()) {
            case "image/jpeg", "image/jpg" -> ".jpg";
            case "image/png" -> ".png";
            case "image/gif" -> ".gif";
            case "image/webp" -> ".webp";
            case "image/bmp" -> ".bmp";
            case "image/tiff" -> ".tiff";
            case "image/svg+xml" -> ".svg";
            default -> null;
        };
    }
    
    private String getExtensionFromUrl(String url) {
        String path = url.toLowerCase();
        String[] extensions = {".jpg", ".jpeg", ".png", ".gif", ".webp", ".bmp", ".svg"};
        
        for (String ext : extensions) {
            if (path.endsWith(ext)) {
                return ext;
            }
        }
        return null;
    }
    
    private String generateFilename(String url, String hosting, String extension) {
        String[] pathParts = url.split("/");
        String token = pathParts[pathParts.length - 1];
        String filename = hosting + "_" + token + extension;
        
        int counter = 1;
        String originalFilename = filename;
        Path filepath = ParserConfig.DOWNLOAD_DIR.resolve(filename);
        
        while (Files.exists(filepath)) {
            String name = FilenameUtils.getBaseName(originalFilename);
            String ext = FilenameUtils.getExtension(originalFilename);
            filename = name + "_" + counter + "." + ext;
            filepath = ParserConfig.DOWNLOAD_DIR.resolve(filename);
            counter++;
        }
        
        return filename;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    public Map<String, Object> getPerformanceStats() {
        Map<String, Object> stats = new HashMap<>();
        stats.put("totalRequests", totalRequests.get());
        stats.put("successfulRequests", successfulRequests.get());
        stats.put("failedRequests", failedRequests.get());
        stats.put("bytesRead", bytesRead.get());
        stats.put("earlyTerminations", earlyTerminations.get());
        stats.put("connectionPools", connectionPools.size());
        
        double successRate = totalRequests.get() > 0 ? 
            (double) successfulRequests.get() / totalRequests.get() * 100 : 0;
        stats.put("successRate", String.format("%.2f%%", successRate));
        
        return stats;
    }
    
    @Override
    public void close() throws Exception {
        logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ NettyImageProcessor...");
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—É–ª—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        for (ConnectionPool pool : connectionPools.values()) {
            pool.close();
        }
        connectionPools.clear();
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º EventLoop –≥—Ä—É–ø–ø—ã
        if (bossGroup != null) {
            bossGroup.shutdownGracefully(0, 5, TimeUnit.SECONDS);
        }
        if (workerGroup != null) {
            workerGroup.shutdownGracefully(0, 5, TimeUnit.SECONDS);
        }
        
        logger.info("‚úÖ NettyImageProcessor –∑–∞–∫—Ä—ã—Ç");
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    private class StreamingImageHandler extends ChannelInboundHandlerAdapter {
        private final Promise<ImageMetadata> promise;
        private final String hosting;
        private final StringBuilder htmlBuffer;
        private final AtomicInteger bytesReceived;
        private boolean foundImage = false;
        private boolean isImageResponse = false;
        private String contentType;
        private Long contentLength;
        private String lastModified;
        private String date;
        
        public StreamingImageHandler(Promise<ImageMetadata> promise, String hosting) {
            this.promise = promise;
            this.hosting = hosting;
            this.htmlBuffer = new StringBuilder();
            this.bytesReceived = new AtomicInteger(0);
        }
        
        @Override
        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
            if (msg instanceof HttpResponse) {
                handleHttpResponse(ctx, (HttpResponse) msg);
            } else if (msg instanceof HttpContent) {
                handleHttpContent(ctx, (HttpContent) msg);
            }
        }
        
        private void handleHttpResponse(ChannelHandlerContext ctx, HttpResponse response) {
            HttpHeaders headers = response.headers();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
            if (!response.status().equals(HttpResponseStatus.OK)) {
                if (!promise.isDone()) {
                    promise.setFailure(new RuntimeException("HTTP " + response.status().code()));
                }
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            contentType = headers.get(HttpHeaderNames.CONTENT_TYPE);
            String contentLengthStr = headers.get(HttpHeaderNames.CONTENT_LENGTH);
            lastModified = headers.get(HttpHeaderNames.LAST_MODIFIED);
            date = headers.get(HttpHeaderNames.DATE);
            
            if (contentLengthStr != null) {
                try {
                    contentLength = Long.parseLong(contentLengthStr);
                } catch (NumberFormatException e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            if (contentType != null && contentType.startsWith("image/")) {
                isImageResponse = true;
                foundImage = true;
                
                // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                ImageMetadata metadata = new ImageMetadata(
                    contentType, contentLength, lastModified, date, null
                );
                if (!promise.isDone()) {
                    promise.setSuccess(metadata);
                }
                
                // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —á—Ç–µ–Ω–∏–µ
                ctx.channel().config().setAutoRead(false);
                earlyTerminations.incrementAndGet();
            }
        }
        
        private void handleHttpContent(ChannelHandlerContext ctx, HttpContent content) {
            if (foundImage) {
                return; // –£–∂–µ –Ω–∞—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            }
            
            ByteBuf buf = content.content();
            int readableBytes = buf.readableBytes();
            bytesReceived.addAndGet(readableBytes);
            bytesRead.addAndGet(readableBytes);
            
            // –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 8KB –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if (bytesReceived.get() > MAX_CHUNK_SIZE) {
                // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —á—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ 8KB
                ctx.channel().config().setAutoRead(false);
                earlyTerminations.incrementAndGet();
                
                // –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–º HTML
                String html = htmlBuffer.toString();
                String imageUrl = findImageInHtml(html);
                
                if (imageUrl != null) {
                    ImageMetadata metadata = new ImageMetadata(
                        "text/html", null, lastModified, date, null, imageUrl
                    );
                    if (!promise.isDone()) {
                        promise.setSuccess(metadata);
                    }
                } else {
                    if (!promise.isDone()) {
                        promise.setFailure(new RuntimeException("No image found in HTML"));
                    }
                }
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            String chunk = buf.toString(StandardCharsets.UTF_8);
            htmlBuffer.append(chunk);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—à–ª–∏ –ª–∏ –º—ã —É–∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞–Ω–∫–µ
            String imageUrl = findImageInHtml(chunk);
            if (imageUrl != null) {
                foundImage = true;
                
                ImageMetadata metadata = new ImageMetadata(
                    "text/html", null, lastModified, date, null, imageUrl
                );
                if (!promise.isDone()) {
                    promise.setSuccess(metadata);
                }
                
                // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —á—Ç–µ–Ω–∏–µ
                ctx.channel().config().setAutoRead(false);
                earlyTerminations.incrementAndGet();
            }
        }
        
        private String findImageInHtml(String html) {
            // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–µ–≥–∏ img
            Matcher imgMatcher = IMG_PATTERN.matcher(html);
            if (imgMatcher.find()) {
                String src = imgMatcher.group(1);
                if (src != null && !src.trim().isEmpty()) {
                    return src;
                }
            }
            
            // –ó–∞—Ç–µ–º –∏—â–µ–º –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            Matcher urlMatcher = IMAGE_URL_PATTERN.matcher(html);
            if (urlMatcher.find()) {
                return urlMatcher.group();
            }
            
            return null;
        }
        
        @Override
        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
            promise.setFailure(cause);
            ctx.close();
        }
    }
    
    /**
     * –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —Ö–æ—Å—Ç–∞
     */
    private class ConnectionPool {
        private final String host;
        private final int port;
        private final boolean ssl;
        private final int maxConnections;
        private final EventLoop eventLoop;
        private final Queue<Channel> availableConnections;
        private final AtomicInteger activeConnections;
        private final Bootstrap bootstrap;
        private volatile boolean closed = false;
        
        public ConnectionPool(String host, int port, boolean ssl, int maxConnections) {
            this.host = host;
            this.port = port;
            this.ssl = ssl;
            this.maxConnections = maxConnections;
            this.eventLoop = workerGroup.next();
            this.availableConnections = new ConcurrentLinkedQueue<>();
            this.activeConnections = new AtomicInteger(0);
            
            this.bootstrap = createBootstrap();
        }
        
        private Bootstrap createBootstrap() {
            Bootstrap bootstrap = new Bootstrap();
            bootstrap.group(eventLoop)
                    .channel(NioSocketChannel.class)
                    .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, CONNECT_TIMEOUT_MS)
                    .option(ChannelOption.SO_KEEPALIVE, true)
                    .option(ChannelOption.TCP_NODELAY, true)
                    .option(ChannelOption.SO_RCVBUF, 65536)
                    .option(ChannelOption.SO_SNDBUF, 65536)
                    .option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT);
            
            if (ssl) {
                try {
                    SslContext sslContext = SslContextBuilder.forClient()
                            .trustManager(InsecureTrustManagerFactory.INSTANCE)
                            .build();
                                         bootstrap.handler(new ChannelInitializer<SocketChannel>() {
                         @Override
                         protected void initChannel(SocketChannel ch) throws Exception {
                             ch.pipeline().addLast(sslContext.newHandler(ch.alloc(), host, port));
                             ch.pipeline().addLast(new HttpClientCodec());
                             ch.pipeline().addLast(new HttpContentDecompressor()); // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ gzip
                             ch.pipeline().addLast(new HttpObjectAggregator(65536));
                             ch.pipeline().addLast(new ReadTimeoutHandler(READ_TIMEOUT_SECONDS));
                             ch.pipeline().addLast(new WriteTimeoutHandler(WRITE_TIMEOUT_SECONDS));
                         }
                     });
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {}", e.getMessage());
                }
            } else {
                                 bootstrap.handler(new ChannelInitializer<SocketChannel>() {
                     @Override
                     protected void initChannel(SocketChannel ch) throws Exception {
                         ch.pipeline().addLast(new HttpClientCodec());
                         ch.pipeline().addLast(new HttpContentDecompressor()); // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ gzip
                         ch.pipeline().addLast(new HttpObjectAggregator(65536));
                         ch.pipeline().addLast(new ReadTimeoutHandler(READ_TIMEOUT_SECONDS));
                         ch.pipeline().addLast(new WriteTimeoutHandler(WRITE_TIMEOUT_SECONDS));
                     }
                 });
            }
            
            return bootstrap;
        }
        
        public Channel acquireConnection() {
            if (closed) {
                return null;
            }
            
            // –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            Channel channel = availableConnections.poll();
            if (channel != null && channel.isActive()) {
                return channel;
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
            if (activeConnections.get() < maxConnections) {
                try {
                    ChannelFuture future = bootstrap.connect(host, port);
                    if (future.await(CONNECT_TIMEOUT_MS, TimeUnit.MILLISECONDS)) {
                        if (future.isSuccess()) {
                            Channel newChannel = future.channel();
                            activeConnections.incrementAndGet();
                            return newChannel;
                        }
                    }
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ {}:{}: {}", host, port, e.getMessage());
                }
            }
            
            return null;
        }
        
        public void releaseConnection(Channel channel) {
            if (channel == null || closed) {
                return;
            }
            
            if (channel.isActive()) {
                availableConnections.offer(channel);
            } else {
                activeConnections.decrementAndGet();
            }
        }
        
        public EventLoop getEventLoop() {
            return eventLoop;
        }
        
        public void close() {
            closed = true;
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            Channel channel;
            while ((channel = availableConnections.poll()) != null) {
                channel.close();
                activeConnections.decrementAndGet();
            }
        }
    }
    
    /**
     * –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public static class ImageMetadata {
        private final String contentType;
        private final Long fileSize;
        private final String lastModified;
        private final String date;
        private final Map<String, List<String>> headers;
        private final String imageUrl;
        
        public ImageMetadata(String contentType, Long fileSize, String lastModified, 
                           String date, Map<String, List<String>> headers) {
            this(contentType, fileSize, lastModified, date, headers, null);
        }
        
        public ImageMetadata(String contentType, Long fileSize, String lastModified, 
                           String date, Map<String, List<String>> headers, String imageUrl) {
            this.contentType = contentType;
            this.fileSize = fileSize;
            this.lastModified = lastModified;
            this.date = date;
            this.headers = headers;
            this.imageUrl = imageUrl;
        }
        
        public String getContentType() { return contentType; }
        public Long getFileSize() { return fileSize; }
        public String getLastModified() { return lastModified; }
        public String getDate() { return date; }
        public Map<String, List<String>> getHeaders() { return headers; }
        public String getImageUrl() { return imageUrl; }
    }
}
