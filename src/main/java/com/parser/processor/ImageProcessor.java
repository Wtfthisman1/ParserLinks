package com.parser.processor;

import com.parser.config.ParserConfig;
import com.parser.model.LinkResult;
import okhttp3.*;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.Random;

/**
 * –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
 */
public class ImageProcessor implements AutoCloseable {
    private static final Logger logger = LoggerFactory.getLogger(ImageProcessor.class);
    
    private final OkHttpClient httpClient;
    private final Map<String, String> contentTypeExtensions;
    private final Random random;
    
    public ImageProcessor() {
        this.httpClient = new OkHttpClient.Builder()
                .connectTimeout(ParserConfig.REQUEST_TIMEOUT_SECONDS, TimeUnit.SECONDS)
                .readTimeout(ParserConfig.REQUEST_TIMEOUT_SECONDS, TimeUnit.SECONDS)
                .writeTimeout(ParserConfig.REQUEST_TIMEOUT_SECONDS, TimeUnit.SECONDS)
                .protocols(Arrays.asList(Protocol.HTTP_1_1)) // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP/1.1
                .build();
        
        this.contentTypeExtensions = new HashMap<>();
        this.random = new Random();
        initializeContentTypeExtensions();
    }
    
    private void initializeContentTypeExtensions() {
        contentTypeExtensions.put("image/jpeg", ".jpg");
        contentTypeExtensions.put("image/jpg", ".jpg");
        contentTypeExtensions.put("image/png", ".png");
        contentTypeExtensions.put("image/gif", ".gif");
        contentTypeExtensions.put("image/webp", ".webp");
        contentTypeExtensions.put("image/bmp", ".bmp");
        contentTypeExtensions.put("image/tiff", ".tiff");
        contentTypeExtensions.put("image/svg+xml", ".svg");
    }
    
    /**
     * –ò–º–∏—Ç–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
     */
    private void humanDelay() {
        try {
            long delay = ParserConfig.MIN_DELAY_BETWEEN_REQUESTS_MS + 
                        random.nextInt((int)(ParserConfig.MAX_DELAY_BETWEEN_REQUESTS_MS - ParserConfig.MIN_DELAY_BETWEEN_REQUESTS_MS));
            Thread.sleep(delay);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π User-Agent –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
     */
    private String getRandomUserAgent() {
        return ParserConfig.USER_AGENTS[random.nextInt(ParserConfig.USER_AGENTS.length)];
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
     */
    private Request.Builder createHumanRequest(String url) {
        return new Request.Builder()
                .url(url)
                .header("User-Agent", getRandomUserAgent())
                .header("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8")
                .header("Accept-Language", "en-US,en;q=0.9,ru;q=0.8")
                .header("DNT", "1")
                .header("Connection", "keep-alive")
                .header("Upgrade-Insecure-Requests", "1");
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    private Request.Builder createImageRequest(String url) {
        return new Request.Builder()
                .url(url)
                .header("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
                .header("Accept", "*/*")
                .header("Referer", "https://postimg.cc/")
                .header("Accept-Language", "en-US,en;q=0.9,ru;q=0.8")
                .header("Cache-Control", "no-cache")
                .header("Pragma", "no-cache");
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public ImageMetadata checkImage(String url, String hosting) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º HEAD –∑–∞–ø—Ä–æ—Å
        ImageMetadata result = checkImageWithHead(url, hosting);
        if (result != null) {
            return result;
        }
        
        // –ï—Å–ª–∏ HEAD –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º GET –∑–∞–ø—Ä–æ—Å
        logger.info("üîÑ HEAD –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º GET –¥–ª—è: {}", url);
        return checkImageWithGet(url, hosting);
    }
    
    private ImageMetadata checkImageWithHead(String url, String hosting) {
        try {
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é HEAD: {}", url);
            
            // –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            humanDelay();
            
            Request request = createHumanRequest(url)
                    .head()
                    .build();
            
            try (Response response = httpClient.newCall(request).execute()) {
                logger.info("üì° HEAD –æ—Ç–≤–µ—Ç: {} - {}", response.code(), response.message());
                
                if (!response.isSuccessful()) {
                    logger.info("‚ùå HEAD HTTP –æ—à–∏–±–∫–∞: {} {}", response.code(), response.message());
                    return null;
                }
                
                ResponseBody body = response.body();
                if (body == null) {
                    logger.info("‚ùå HEAD –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç");
                    return null;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                String contentType = response.header("content-type");
                logger.info("üìÑ HEAD Content-Type: {}", contentType);
                
                if (contentType == null || !contentType.startsWith("image/")) {
                    logger.info("‚ùå HEAD –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {}", contentType);
                    return null;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                String contentLength = response.header("content-length");
                Long fileSize = contentLength != null ? Long.parseLong(contentLength) : null;
                logger.info("üìè HEAD —Ä–∞–∑–º–µ—Ä: {} bytes", fileSize != null ? fileSize : "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                if (fileSize != null && fileSize > ParserConfig.MAX_IMAGE_SIZE_MB * 1024 * 1024) {
                    logger.info("‚ùå HEAD —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {} bytes", fileSize);
                    return null;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
                String lastModified = response.header("last-modified");
                String date = response.header("date");
                logger.info("üìÖ HEAD Last-Modified: {}", lastModified);
                logger.info("üìÖ HEAD Date: {}", date);
                
                logger.info("‚úÖ HEAD –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ! –¢–∏–ø: {}, –†–∞–∑–º–µ—Ä: {} bytes", contentType, fileSize);
                
                return new ImageMetadata(
                    contentType,
                    fileSize,
                    lastModified,
                    date,
                    response.headers().toMultimap()
                );
            }
        } catch (Exception e) {
            logger.error("üí• HEAD –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {}: {}", url, e.getMessage());
        }
        
        return null;
    }
    
    private ImageMetadata checkImageWithGet(String url, String hosting) {
        return checkImageWithGet(url, hosting, 0);
    }
    
    private ImageMetadata checkImageWithGet(String url, String hosting, int depth) {
        try {
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é GET (–≥–ª—É–±–∏–Ω–∞ {}): {}", depth, url);
            
            // –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            humanDelay();
            
            Request request = createImageRequest(url)
                    .build();
            
            try (Response response = httpClient.newCall(request).execute()) {
                logger.info("üì° GET –æ—Ç–≤–µ—Ç: {} - {}", response.code(), response.message());
                
                if (!response.isSuccessful()) {
                    logger.info("‚ùå GET HTTP –æ—à–∏–±–∫–∞: {} {}", response.code(), response.message());
                    return null;
                }
                
                ResponseBody body = response.body();
                if (body == null) {
                    logger.info("‚ùå GET –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç");
                    return null;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                String contentType = response.header("content-type");
                logger.info("üìÑ GET Content-Type: {}", contentType);
                
                if (contentType == null || !contentType.startsWith("image/")) {
                    logger.info("‚ùå GET –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {}", contentType);
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –Ω–µ—ë
                    if (contentType.contains("text/html")) {
                        logger.info("üåê –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∏–∑–≤–ª–µ–∫–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...");
                        return extractImagesFromHtml(url, hosting);
                    }
                    
                    return null;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                String contentLength = response.header("content-length");
                Long fileSize = contentLength != null ? Long.parseLong(contentLength) : null;
                logger.info("üìè GET —Ä–∞–∑–º–µ—Ä: {} bytes", fileSize != null ? fileSize : "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                if (fileSize != null && fileSize > ParserConfig.MAX_IMAGE_SIZE_MB * 1024 * 1024) {
                    logger.info("‚ùå GET —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {} bytes", fileSize);
                    return null;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
                String lastModified = response.header("last-modified");
                String date = response.header("date");
                logger.info("üìÖ GET Last-Modified: {}", lastModified);
                logger.info("üìÖ GET Date: {}", date);
                
                logger.info("‚úÖ GET –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ! –¢–∏–ø: {}, –†–∞–∑–º–µ—Ä: {} bytes", contentType, fileSize);
                
                return new ImageMetadata(
                    contentType,
                    fileSize,
                    lastModified,
                    date,
                    response.headers().toMultimap()
                );
            }
        } catch (Exception e) {
            logger.error("üí• GET –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {}: {}", url, e.getMessage());
        }
        
        return null;
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    private ImageMetadata extractImagesFromHtml(String pageUrl, String hosting) {
        return extractImagesFromHtml(pageUrl, hosting, 0);
    }
    
    private ImageMetadata extractImagesFromHtml(String pageUrl, String hosting, int depth) {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
        if (depth > 2) {
            logger.warn("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ HTML");
            return null;
        }
        
        try (AdvancedHtmlImageExtractor extractor = new AdvancedHtmlImageExtractor()) {
            List<String> imageUrls = extractor.extractImageUrls(pageUrl);
            
            if (imageUrls.isEmpty()) {
                logger.info("‚ùå –í HTML —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π");
                return null;
            }
            
            // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            String firstImageUrl = imageUrls.get(0);
            logger.info("üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ HTML (–≥–ª—É–±–∏–Ω–∞ {}): {}", depth, firstImageUrl);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –º—ã —Å–∫–∞—á–∞—Ç—å —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if (firstImageUrl.equals(pageUrl)) {
                logger.warn("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞: {}", firstImageUrl);
                return null;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ImageMetadata metadata = checkImageWithGet(firstImageUrl, hosting, depth + 1);
            if (metadata != null) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                return new ImageMetadata(
                    metadata.getContentType(),
                    metadata.getFileSize(),
                    metadata.getLastModified(),
                    metadata.getDate(),
                    metadata.getHeaders(),
                    firstImageUrl // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                );
            }
            return metadata;
            
        } catch (Exception e) {
            logger.error("üí• –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ HTML: {}", e.getMessage());
            return null;
        }
    }
    
    /**
     * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public Path downloadImage(String url, String hosting, ImageMetadata metadata) {
        try {
            // –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            humanDelay();
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            String downloadUrl = metadata.getImageUrl() != null ? metadata.getImageUrl() : url;
            logger.info("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Å URL: {} (–∏—Å—Ö–æ–¥–Ω—ã–π: {})", downloadUrl, url);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            String extension = getExtensionFromContentType(metadata.getContentType());
            if (extension == null) {
                extension = getExtensionFromUrl(downloadUrl);
                if (extension == null) {
                    extension = ".jpg"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                }
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            String filename = generateFilename(url, hosting, extension);
            Path filepath = ParserConfig.DOWNLOAD_DIR.resolve(filename);
            
            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            Files.createDirectories(ParserConfig.DOWNLOAD_DIR);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º curl –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—Ç–∞–∫ –∫–∞–∫ OkHttp –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å postimg.cc)
            String curlCommand = String.format(
                "curl -s -L \"%s\" -H \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\" " +
                "-H \"Accept: */*\" -H \"Referer: https://postimg.cc/\" -o \"%s\"",
                downloadUrl, filepath.toString()
            );
            
            logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è—é curl –∫–æ–º–∞–Ω–¥—É: {}", curlCommand);
            
            Process process = Runtime.getRuntime().exec(new String[]{"bash", "-c", curlCommand});
            int exitCode = process.waitFor();
            
            if (exitCode == 0) {
                logger.info("‚úÖ –°–∫–∞—á–∞–Ω —Ñ–∞–π–ª: {}", filepath);
                return filepath;
            } else {
                logger.error("‚ùå –û—à–∏–±–∫–∞ curl (–∫–æ–¥ {}): {}", exitCode, curlCommand);
                return null;
            }
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {}: {}", url, e.getMessage());
            logger.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", e);
        }
        
        return null;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–Ω—è—Ö
     */
    public Integer checkImageAge(ImageMetadata metadata) {
        try {
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            String lastModified = metadata.getLastModified();
            if (lastModified != null) {
                try {
                    // –ü–∞—Ä—Å–∏–º RFC 2822 —Ñ–æ—Ä–º–∞—Ç
                    DateTimeFormatter formatter = DateTimeFormatter.RFC_1123_DATE_TIME;
                    LocalDateTime dt = LocalDateTime.parse(lastModified, formatter);
                    return (int) java.time.Duration.between(dt, LocalDateTime.now()).toDays();
                } catch (Exception e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                }
            }
            
            // –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
            String dateHeader = metadata.getDate();
            if (dateHeader != null) {
                try {
                    DateTimeFormatter formatter = DateTimeFormatter.RFC_1123_DATE_TIME;
                    LocalDateTime dt = LocalDateTime.parse(dateHeader, formatter);
                    return (int) java.time.Duration.between(dt, LocalDateTime.now()).toDays();
                } catch (Exception e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–µ
            return 0;
            
        } catch (Exception e) {
            logger.debug("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞: {}", e.getMessage());
            return null;
        }
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–∫–∞—á–∏–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
     */
    public boolean shouldDownloadImage(Integer ageDays) {
        if (ageDays == null) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç, —Å–∫–∞—á–∏–≤–∞–µ–º
            return true;
        }
        
        return ageDays >= ParserConfig.MIN_IMAGE_AGE_DAYS;
    }
    
    /**
     * –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public LinkResult processImageUrl(String url, String hosting) {
        try {
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É: {}", url);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            ImageMetadata metadata = checkImage(url, hosting);
            
            if (metadata == null) {
                logger.info("üì≠ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–£–°–¢–ê–Ø —Å—Å—ã–ª–∫–∞");
                return LinkResult.builder()
                        .url(url)
                        .hosting(hosting)
                        .status("empty")
                        .build();
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
            Integer ageDays = checkImageAge(metadata);
            logger.info("üìÖ –í–æ–∑—Ä–∞—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {} –¥–Ω–µ–π", ageDays != null ? ageDays : "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω");
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–∫–∞—á–∏–≤–∞—Ç—å
            if (!shouldDownloadImage(ageDays)) {
                logger.info("‚è≠Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–†–û–ü–£–©–ï–ù–û (—Å–ª–∏—à–∫–æ–º –Ω–æ–≤–æ–µ, {} –¥–Ω–µ–π)", ageDays);
                return LinkResult.builder()
                        .url(url)
                        .hosting(hosting)
                        .status("skipped")
                        .imageAgeDays(ageDays)
                        .build();
            }
            
            // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            logger.info("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...");
            Path filePath = downloadImage(url, hosting, metadata);
            
            if (filePath != null) {
                logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: –°–ö–ê–ß–ê–ù–û –≤ {}", filePath);
                return LinkResult.builder()
                        .url(url)
                        .hosting(hosting)
                        .status("downloaded")
                        .filePath(filePath)
                        .fileSize(metadata.getFileSize())
                        .imageAgeDays(ageDays)
                        .build();
            } else {
                logger.error("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç: –û–®–ò–ë–ö–ê —Å–∫–∞—á–∏–≤–∞–Ω–∏—è");
                return LinkResult.builder()
                        .url(url)
                        .hosting(hosting)
                        .status("error")
                        .imageAgeDays(ageDays)
                        .errorMessage("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                        .build();
            }
            
        } catch (Exception e) {
            String errorMsg = e.getMessage();
            logger.error("üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {}: {}", url, errorMsg);
            return LinkResult.builder()
                    .url(url)
                    .hosting(hosting)
                    .status("error")
                    .errorMessage(errorMsg)
                    .build();
        }
    }
    
    private String getExtensionFromContentType(String contentType) {
        if (contentType == null) {
            return null;
        }
        return contentTypeExtensions.get(contentType.toLowerCase());
    }
    
    private String getExtensionFromUrl(String url) {
        String path = url.toLowerCase();
        for (String ext : contentTypeExtensions.values()) {
            if (path.endsWith(ext)) {
                return ext;
            }
        }
        return null;
    }
    
    private String generateFilename(String url, String hosting, String extension) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ URL
        String[] pathParts = url.split("/");
        String token = pathParts[pathParts.length - 1]; // –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –ø—É—Ç–∏ - —Ç–æ–∫–µ–Ω
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Ö–æ—Å—Ç–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
        String filename = hosting + "_" + token + extension;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        int counter = 1;
        String originalFilename = filename;
        Path filepath = ParserConfig.DOWNLOAD_DIR.resolve(filename);
        
        while (Files.exists(filepath)) {
            String name = FilenameUtils.getBaseName(originalFilename);
            String ext = FilenameUtils.getExtension(originalFilename);
            filename = name + "_" + counter + "." + ext;
            filepath = ParserConfig.DOWNLOAD_DIR.resolve(filename);
            counter++;
        }
        
        return filename;
    }
    
    @Override
    public void close() throws IOException {
        if (httpClient != null) {
            httpClient.dispatcher().executorService().shutdown();
            httpClient.connectionPool().evictAll();
        }
    }
    
    /**
     * –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public static class ImageMetadata {
        private final String contentType;
        private final Long fileSize;
        private final String lastModified;
        private final String date;
        private final Map<String, java.util.List<String>> headers;
        private final String imageUrl; // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ URL)
        
        public ImageMetadata(String contentType, Long fileSize, String lastModified, 
                           String date, Map<String, java.util.List<String>> headers) {
            this(contentType, fileSize, lastModified, date, headers, null);
        }
        
        public ImageMetadata(String contentType, Long fileSize, String lastModified, 
                           String date, Map<String, java.util.List<String>> headers, String imageUrl) {
            this.contentType = contentType;
            this.fileSize = fileSize;
            this.lastModified = lastModified;
            this.date = date;
            this.headers = headers;
            this.imageUrl = imageUrl;
        }
        
        public String getContentType() { return contentType; }
        public Long getFileSize() { return fileSize; }
        public String getLastModified() { return lastModified; }
        public String getDate() { return date; }
        public Map<String, java.util.List<String>> getHeaders() { return headers; }
        public String getImageUrl() { return imageUrl; }
    }
}
